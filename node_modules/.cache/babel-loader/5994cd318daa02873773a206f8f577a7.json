{"ast":null,"code":"import { API } from \"../../backend\";\nimport axios from \"axios\"; //company calls\n\nexport const createCompany = async (token, company) => {\n  const data = JSON.stringify(company);\n  return await axios.post(`${API}/company/add`, data, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"auth-token\": token\n    }\n  }).then(response => {\n    return response.data;\n  }).catch(error => {\n    return {\n      error: error.response.data.message\n    };\n  });\n}; //get all companies\n\nexport const getCompany = async token => {\n  return await axios.get(`${API}/company/all`, {\n    headers: {\n      \"auth-token\": token\n    }\n  }).then(response => {\n    return response.data.companies;\n  }).catch(error => {\n    return {\n      error: error.response.data.message\n    };\n  });\n}; //getaCompany \n\nexport const getaCompany = async (token, companyId) => {\n  return await axios.get(`${API}/company/find/${companyId}`, {\n    headers: {\n      \"auth-token\": token\n    }\n  }).then(response => {\n    return response.data.details;\n  }).catch(error => {\n    return {\n      error: error.response.data.message\n    };\n  });\n}; //update category\n\nexport const updateCompany = async (companyId, token, company) => {\n  const {\n    name,\n    description,\n    address,\n    contact\n  } = company;\n  return await axios.put(`${API}/company/update`, {\n    _id: companyId,\n    name,\n    description,\n    address,\n    contact\n  }, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"auth-token\": token\n    }\n  }).then(response => {\n    return response.data;\n  }).catch(error => {\n    return {\n      error: error.response.data.message\n    };\n  });\n}; //deleteCompany\n\nexport const deleteCompany = (token, companyId) => {\n  //const id=JSON.stringify(token);\n  console.log({\n    token,\n    companyId\n  });\n  return axios.delete(`${API}/company/delete/${companyId}`, {\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"auth-token\": token\n    }\n  }).then(response => {\n    return response.data;\n  }).catch(error => {\n    console.log({\n      error: error.response.data.message\n    });\n  });\n}; //products calls\n//create a product\n\nexport const createaProduct = (userId, token, product) => {\n  return fetch(`${API}/product/create/${userId}`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: product\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; //get all products\n\nexport const getProducts = () => {\n  return fetch(`${API}/products`, {\n    method: \"GET\"\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; //delete a product\n\nexport const deleteProduct = (productId, userId, token) => {\n  return fetch(`${API}/product/${productId}/${userId}`, {\n    method: \"DELETE\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; //get a product\n\nexport const getProduct = productId => {\n  return fetch(`${API}/product/${productId}`, {\n    method: \"GET\"\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; //update a product\n\nexport const updateProduct = (productId, userId, token, product) => {\n  return fetch(`${API}/product/${productId}/${userId}`, {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: product\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};","map":{"version":3,"sources":["/home/shebin/Desktop/allen/src/admin/helper/adminapicall.js"],"names":["API","axios","createCompany","token","company","data","JSON","stringify","post","headers","then","response","catch","error","message","getCompany","get","companies","getaCompany","companyId","details","updateCompany","name","description","address","contact","put","_id","deleteCompany","console","log","delete","Accept","createaProduct","userId","product","fetch","method","Authorization","body","json","err","getProducts","deleteProduct","productId","getProduct","updateProduct"],"mappings":"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","sourcesContent":["import { API } from \"../../backend\";\nimport axios from \"axios\";\n\n//company calls\nexport const createCompany = async(token, company) => {\nconst data=JSON.stringify(company);\nreturn await axios.post(`${API}/company/add`,(data),{headers: {\n \"Content-Type\": \"application/json\",\n \"auth-token\": token\n}})\n.then(response=> {\nreturn(response.data);\n})\n.catch(error=>{ \nreturn {error:error.response.data.message};     \n})};\n     \n\n//get all companies\n\nexport const getCompany = async(token) => {\n  \n  return await axios.get(`${API}/company/all`,{headers: {\n   \"auth-token\": token\n  }})\n  .then(response=> {\n  return(response.data.companies);\n  })\n  .catch(error=>{ \n  return( {error:error.response.data.message});   \n  })};\n\n //getaCompany \n\n export const getaCompany = async(token,companyId) => {\n  \n  return await axios.get(`${API}/company/find/${companyId}`,{headers: {\n   \"auth-token\": token\n  }})\n  .then(response=> {\n  return(response.data.details);\n  })\n  .catch(error=>{ \n    \n\n   return( {error:error.response.data.message});   \n  })};\n       \n\n\n\n\n\n\n\n\n\n \n//update category\nexport const updateCompany = async(companyId,token, company) => {\n  const {name,description,address,contact}=company;\n  return await axios.put(`${API}/company/update`,{_id:companyId,name,description,address,contact},{headers: {\n   \"Content-Type\": \"application/json\",\n   \"auth-token\": token\n  }})\n  .then(response=> {\n  return(response.data);\n  })\n  .catch(error=>{ \n  return({error:error.response.data.message}); \n   \n  })};\n\n\n\n\n//deleteCompany\n\nexport const deleteCompany = (token,companyId) => {\n  //const id=JSON.stringify(token);\n  console.log({token,companyId});\n  return axios.delete(`${API}/company/delete/${companyId}`,{headers: {\n    Accept:\"application/json\",\n    \"Content-Type\":\"application/json\",\n    \"Access-Control-Allow-Origin\":\"*\",\n   \"auth-token\":token\n   \n  }})\n  .then(response=> {\n  return(response.data);\n  })\n  .catch(error=>{ \n    \n  console.log( {error:error.response.data.message});   \n  })};\n\n\n\n//products calls\n\n//create a product\nexport const createaProduct = (userId, token, product) => {\n  return fetch(`${API}/product/create/${userId}`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: product\n  })\n    .then(response => {\n      return response.json();\n    })\n    .catch(err => console.log(err));\n};\n\n//get all products\nexport const getProducts = () => {\n  return fetch(`${API}/products`, {\n    method: \"GET\"\n  })\n    .then(response => {\n      return response.json();\n    })\n    .catch(err => console.log(err));\n};\n\n//delete a product\n\nexport const deleteProduct = (productId, userId, token) => {\n  return fetch(`${API}/product/${productId}/${userId}`, {\n    method: \"DELETE\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  })\n    .then(response => {\n      return response.json();\n    })\n    .catch(err => console.log(err));\n};\n\n//get a product\n\nexport const getProduct = productId => {\n  return fetch(`${API}/product/${productId}`, {\n    method: \"GET\"\n  })\n    .then(response => {\n      return response.json();\n    })\n    .catch(err => console.log(err));\n};\n\n//update a product\n\nexport const updateProduct = (productId, userId, token, product) => {\n  return fetch(`${API}/product/${productId}/${userId}`, {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: product\n  })\n    .then(response => {\n      return response.json();\n    })\n    .catch(err => console.log(err));\n};\n"]},"metadata":{},"sourceType":"module"}